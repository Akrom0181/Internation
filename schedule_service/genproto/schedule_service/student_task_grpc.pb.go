// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: student_task.proto

package schedule_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StudentTaskService_Create_FullMethodName                = "/schedule_service.StudentTaskService/Create"
	StudentTaskService_GetByID_FullMethodName               = "/schedule_service.StudentTaskService/GetByID"
	StudentTaskService_GetList_FullMethodName               = "/schedule_service.StudentTaskService/GetList"
	StudentTaskService_Update_FullMethodName                = "/schedule_service.StudentTaskService/Update"
	StudentTaskService_Delete_FullMethodName                = "/schedule_service.StudentTaskService/Delete"
	StudentTaskService_UpdateScoreforTeacher_FullMethodName = "/schedule_service.StudentTaskService/UpdateScoreforTeacher"
	StudentTaskService_UpdateScoreforStudent_FullMethodName = "/schedule_service.StudentTaskService/UpdateScoreforStudent"
)

// StudentTaskServiceClient is the client API for StudentTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentTaskServiceClient interface {
	Create(ctx context.Context, in *CreateStudentTask, opts ...grpc.CallOption) (*GetStudentTask, error)
	GetByID(ctx context.Context, in *StudentTaskPrimaryKey, opts ...grpc.CallOption) (*GetStudentTask, error)
	GetList(ctx context.Context, in *GetListStudentTaskRequest, opts ...grpc.CallOption) (*GetListStudentTaskResponse, error)
	Update(ctx context.Context, in *UpdateStudentTask, opts ...grpc.CallOption) (*GetStudentTask, error)
	Delete(ctx context.Context, in *StudentTaskPrimaryKey, opts ...grpc.CallOption) (*EmptyStudentTask, error)
	UpdateScoreforTeacher(ctx context.Context, in *UpdateStudentScoreRequest, opts ...grpc.CallOption) (*GetStudentTask, error)
	UpdateScoreforStudent(ctx context.Context, in *UpdateStudentScoreRequest, opts ...grpc.CallOption) (*GetStudentTask, error)
}

type studentTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentTaskServiceClient(cc grpc.ClientConnInterface) StudentTaskServiceClient {
	return &studentTaskServiceClient{cc}
}

func (c *studentTaskServiceClient) Create(ctx context.Context, in *CreateStudentTask, opts ...grpc.CallOption) (*GetStudentTask, error) {
	out := new(GetStudentTask)
	err := c.cc.Invoke(ctx, StudentTaskService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTaskServiceClient) GetByID(ctx context.Context, in *StudentTaskPrimaryKey, opts ...grpc.CallOption) (*GetStudentTask, error) {
	out := new(GetStudentTask)
	err := c.cc.Invoke(ctx, StudentTaskService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTaskServiceClient) GetList(ctx context.Context, in *GetListStudentTaskRequest, opts ...grpc.CallOption) (*GetListStudentTaskResponse, error) {
	out := new(GetListStudentTaskResponse)
	err := c.cc.Invoke(ctx, StudentTaskService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTaskServiceClient) Update(ctx context.Context, in *UpdateStudentTask, opts ...grpc.CallOption) (*GetStudentTask, error) {
	out := new(GetStudentTask)
	err := c.cc.Invoke(ctx, StudentTaskService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTaskServiceClient) Delete(ctx context.Context, in *StudentTaskPrimaryKey, opts ...grpc.CallOption) (*EmptyStudentTask, error) {
	out := new(EmptyStudentTask)
	err := c.cc.Invoke(ctx, StudentTaskService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTaskServiceClient) UpdateScoreforTeacher(ctx context.Context, in *UpdateStudentScoreRequest, opts ...grpc.CallOption) (*GetStudentTask, error) {
	out := new(GetStudentTask)
	err := c.cc.Invoke(ctx, StudentTaskService_UpdateScoreforTeacher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentTaskServiceClient) UpdateScoreforStudent(ctx context.Context, in *UpdateStudentScoreRequest, opts ...grpc.CallOption) (*GetStudentTask, error) {
	out := new(GetStudentTask)
	err := c.cc.Invoke(ctx, StudentTaskService_UpdateScoreforStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentTaskServiceServer is the server API for StudentTaskService service.
// All implementations should embed UnimplementedStudentTaskServiceServer
// for forward compatibility
type StudentTaskServiceServer interface {
	Create(context.Context, *CreateStudentTask) (*GetStudentTask, error)
	GetByID(context.Context, *StudentTaskPrimaryKey) (*GetStudentTask, error)
	GetList(context.Context, *GetListStudentTaskRequest) (*GetListStudentTaskResponse, error)
	Update(context.Context, *UpdateStudentTask) (*GetStudentTask, error)
	Delete(context.Context, *StudentTaskPrimaryKey) (*EmptyStudentTask, error)
	UpdateScoreforTeacher(context.Context, *UpdateStudentScoreRequest) (*GetStudentTask, error)
	UpdateScoreforStudent(context.Context, *UpdateStudentScoreRequest) (*GetStudentTask, error)
}

// UnimplementedStudentTaskServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentTaskServiceServer struct {
}

func (UnimplementedStudentTaskServiceServer) Create(context.Context, *CreateStudentTask) (*GetStudentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStudentTaskServiceServer) GetByID(context.Context, *StudentTaskPrimaryKey) (*GetStudentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedStudentTaskServiceServer) GetList(context.Context, *GetListStudentTaskRequest) (*GetListStudentTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedStudentTaskServiceServer) Update(context.Context, *UpdateStudentTask) (*GetStudentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStudentTaskServiceServer) Delete(context.Context, *StudentTaskPrimaryKey) (*EmptyStudentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStudentTaskServiceServer) UpdateScoreforTeacher(context.Context, *UpdateStudentScoreRequest) (*GetStudentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScoreforTeacher not implemented")
}
func (UnimplementedStudentTaskServiceServer) UpdateScoreforStudent(context.Context, *UpdateStudentScoreRequest) (*GetStudentTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScoreforStudent not implemented")
}

// UnsafeStudentTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentTaskServiceServer will
// result in compilation errors.
type UnsafeStudentTaskServiceServer interface {
	mustEmbedUnimplementedStudentTaskServiceServer()
}

func RegisterStudentTaskServiceServer(s grpc.ServiceRegistrar, srv StudentTaskServiceServer) {
	s.RegisterService(&StudentTaskService_ServiceDesc, srv)
}

func _StudentTaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentTaskService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTaskServiceServer).Create(ctx, req.(*CreateStudentTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentTaskService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentTaskPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTaskServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentTaskService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTaskServiceServer).GetByID(ctx, req.(*StudentTaskPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentTaskService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListStudentTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTaskServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentTaskService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTaskServiceServer).GetList(ctx, req.(*GetListStudentTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentTaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentTaskService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTaskServiceServer).Update(ctx, req.(*UpdateStudentTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentTaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentTaskPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentTaskService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTaskServiceServer).Delete(ctx, req.(*StudentTaskPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentTaskService_UpdateScoreforTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTaskServiceServer).UpdateScoreforTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentTaskService_UpdateScoreforTeacher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTaskServiceServer).UpdateScoreforTeacher(ctx, req.(*UpdateStudentScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentTaskService_UpdateScoreforStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentTaskServiceServer).UpdateScoreforStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentTaskService_UpdateScoreforStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentTaskServiceServer).UpdateScoreforStudent(ctx, req.(*UpdateStudentScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentTaskService_ServiceDesc is the grpc.ServiceDesc for StudentTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule_service.StudentTaskService",
	HandlerType: (*StudentTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StudentTaskService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _StudentTaskService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _StudentTaskService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StudentTaskService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StudentTaskService_Delete_Handler,
		},
		{
			MethodName: "UpdateScoreforTeacher",
			Handler:    _StudentTaskService_UpdateScoreforTeacher_Handler,
		},
		{
			MethodName: "UpdateScoreforStudent",
			Handler:    _StudentTaskService_UpdateScoreforStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student_task.proto",
}
